export const IntercomApiArticles = [
    {
        id: "96150",
        title: "How to Get the First Transaction of a Contract Address?",
        description:
            "This article show how to get the first transactions of a contract address using Moralis API",
        url: "https://help.moralis.io/en/articles/96150-how-to-get-the-first-transaction-of-a-contract-address",
        body: 'Sample Code\nTo get the first transaction of a contract, you can utilize the Moralis getWalletActiveChains API. Here\'s a simple example of how to use it:\n\nconst Moralis = require("moralis").default;const { EvmChain } = require("@moralisweb3/common-evm-utils");const runApp = async () => {await Moralis.start({apiKey: "YOUR_API_KEY",});const address = "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d";const chains = [EvmChain.ETHEREUM];const response = await Moralis.EvmApi.wallets.getWalletActiveChains({address,chains,});console.log(response.toJSON());}runApp();\nI used an NFT contract address for the example. \nThe response from the above code will provide details about the first transaction, including the date and block number:\n\n{  "address": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",  "active_chains": [    {      "chain": "eth",      "chain_id": "0x1",      "first_transaction": {        "block_timestamp": "2021-04-22T23:13:40.000Z",        "block_number": "12292922",        "transaction_hash": "0xcfb197f62ec5c7f0e71a11ec0c4a0e394a3aa41db5386e85526f86c84b3f2796"      },      "last_transaction": {        "block_timestamp": "2023-09-13T09:14:11.000Z",        "block_number": "18126424",        "transaction_hash": "0x7414c1dcb63cf87e17a694419c13c231906571ce5d4d11c4f2aa76aa3a8cd8b6"      }    }  ]}\n\nUse Cases\n\n\nGetting the Age of the Contract Address: By retrieving the first transaction\'s timestamp, you can easily determine the age of a contract. This can be useful for analytics, trust scoring, or other analytical purposes.\n\n\nFetching Initial Transactions: With the block number of the first transaction, you can retrieve a set of subsequent initial transactions of the NFT contract using getNFTContractTransfers.\nFor instance, to get the early transactions of a contract using the fromBlock and toBlock values:\n\nconst response = await await Moralis.EvmApi.nft.getNFTContractTransfers({"chain": EvmChain.ETHEREUM,"fromBlock": 12292922,"toBlock": 12293022, "address": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d","format": "decimal"});\nThis will fetch transactions from block 12292922 to 12293022, giving you a snapshot of the contract\'s early activities and making it easy to retrieve the initial transactions of a contract without having to paginate through all the transaction data.',
    },
    {
        id: "95777",
        title: "How to Get the First Transaction of a Wallet Address?",
        description:
            "This article show how to get the first transactions of a wallet address using Moralis API",
        url: "https://help.moralis.io/en/articles/95777-how-to-get-the-first-transaction-of-a-wallet-address",
        body: 'Sample Code\nTo get the first transaction of a wallet, you can utilize the Moralis getWalletActiveChains API. Here\'s a simple example of how to use it:\n\nconst Moralis = require("moralis").default;const { EvmChain } = require("@moralisweb3/common-evm-utils");const runApp = async () => {  await Moralis.start({    apiKey: "YOUR_API_KEY",  });  const address = "0xd8da6bf26964af9d7eed9e03e53415d37aa96045";  const chains = [EvmChain.ETHEREUM];  const response = await Moralis.EvmApi.wallets.getWalletActiveChains({    address,    chains,  });    console.log(response.toJSON());}runApp();\n\nThe response from the above code will provide details about the first transaction, including the date and block number:\n\n{  "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",  "active_chains": [    {      "chain": "eth",      "chain_id": "0x1",      "first_transaction": {        "block_timestamp": "2015-09-28T08:24:43.000Z",        "block_number": "302086",        "transaction_hash": "0x9b629147b75dc0b275d478fa34d97c5d4a26926457540b15a5ce871df36c23fd"      },      "last_transaction": {        "block_timestamp": "2023-09-13T04:10:35.000Z",        "block_number": "18124916",        "transaction_hash": "0x03df03fc1dbcb6aac110bd0372412e5f671b93be0b127e730889d826c05d92b4"      }    }  ]}\n\nUse Cases\n\n\nGetting the Age of the Wallet Address: By retrieving the first transaction\'s timestamp, you can easily determine the age of a wallet. This can be useful for analytics, trust scoring, or other analytical purposes.\n\n\nFetching Initial Transactions: With the block number of the first transaction, you can retrieve a set of subsequent initial transactions of the wallet using getWalletTransactions. \nFor instance, to get the early transactions of a wallet using the fromBlock and toBlock values: \n\nconst response = await Moralis.EvmApi.transaction.getWalletTransactions({    "chain": EvmChain.ETHEREUM,    "fromBlock": 302086,    "toBlock": 302186,     "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"  });\nThis will fetch transactions from block 302086 to 302186, giving you a snapshot of the wallet\'s early activities and making it easy to retrieve the initial transactions of a wallet without having to paginate through all the transaction data.\n',
    },
    {
        id: "94303",
        title: "How to migrate to the stats endpoints for total value?",
        description: "How to migrate to the stats endpoints for total value",
        url: "https://help.moralis.io/en/articles/94303-how-to-migrate-to-the-stats-endpoints-for-total-value",
        body: 'As of 11th September 2023, the total value returned on the endpoints will no longer be returned. This means that we deprecated the disable_total parameter and total field value. You can read about this update in the changelog (https://docs.moralis.io/changelog/essential-api-changes).\n\nNew Endpoints: We have introduced five new endpoints that will replace the deprecated total value:\n\n\nGet Wallet Stats - /wallets/{address}/stats\n\n\nGet NFT Collection Stats - /nft/{address}/stats\n\n\nGet NFT Token Id Stats - /nft/{address}/{token_id}/stats\n\n\nGet ERC20 Token Stats - /erc20/{address}/stats\n\n\nGet Block  Stats - /block/{block_number_or_hash}/stats\n\nMigration Guide: The article provides a guide on how to migrate existing code to use the new stats endpoints, specifically focusing on the NFT collections stats endpoint.\n\nDefine a Function: \nDefine a new function to use the NFT collections stats and return the required total value. \nThe response from the NFT Collection stats looks like below. For this code example, we only use the total value of NFT owners.\n{   "total_tokens": "10007",   "owners": { "current": "10007" }, // 👈 required total owners value  "transfers": { "total": "24582" },  "trades": { "total": "1" }}\n\nThe below function code will return the NFT owner\'s total\n// app.jsconst getTotalOwners = async (address, chain) => {const url = `https://deep-index.moralis.io/api/v2.2/nft/${address}/stats?chain=${chain}`;const response = await fetch(url, {method: "GET",  headers: {    accept: "application/json",    "X-API-Key": "Moralis_API_KEY",  },});const data = await response.json();return data.owners.current; // 👈 returns the total owners value};\n\nIntegrate with Existing Code:\nNow you can use the getTotalOwners function in your existing code to get the total owners and calculate the total pages.\n// app.jsconst Moralis = require("moralis").default;const init = async () => {const address = "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"; const chain = "0x1";await Moralis.start({    apiKey: "Moralis_API_KEY",  });// 👇 using the getTotalOwners function to get the total owners value and //    calculating the total pagesconst totalOwners = await getTotalOwners(address, chain);const pageSize = 100; const totalPages = Math.ceil(totalOwners / pageSize); let cursor = null; let owners = {}; for (let currentPage = 1; currentPage <= totalPages; currentPage++) { const response = await Moralis.EvmApi.nft.getNFTOwners({   address,   chain,   limit: pageSize,   cursor: cursor,   disableTotal: false, }); console.log( `Got page ${currentPage} of ${totalPages}, ${totalOwners} total` ); for (const NFT of response.result) {   if (NFT.ownerOf.checksum in owners) {        owners[NFT.ownerOf.checksum].push({         amount: NFT.amount,         owner: NFT.ownerOf,         tokenId: NFT.tokenId,         tokenAddress: NFT.tokenAddress,       });     } else {       owners[NFT.ownerOf.checksum] = [       {        amount: NFT.amount,        owner: NFT.ownerOf,        tokenId: NFT.tokenId,        tokenAddress: NFT.tokenAddress,      },    ];  }} cursor = response.pagination.cursor; } console.log("owners:", owners, "total owners:", Object.keys(owners).length);};init();\n\nBy following the above steps, you can seamlessly integrate the new stats endpoints into your existing code. Happy coding! 😄',
    },
    {
        id: "94216",
        title: "How to listen to a specific ERC20 token sent or received by a wallet address?",
        description: "Receive webhooks when a specific address sends an ERC20 token",
        url: "https://help.moralis.io/en/articles/94216-how-to-listen-to-a-specific-erc20-token-sent-or-received-by-a-wallet-address",
        body: "Note: There could be a few ERC20 contracts that don't follow the standards, and they may use a different ABI for transfers.\n\nNote: You will use the ABI specific to ERC20 transfers, the one that doesn't have indexed for third parameter.\n\n\nVia Web UI\n\n\n\nCreate a new Stream\n[Image: https://downloads.intercomcdn.eu/i/o/4963214/980c40c590c8b27ece379c41/1.PNG]\n\n\n\nAdd the token contract address to the Stream (in this example USDT)\n[Image: https://downloads.intercomcdn.eu/i/o/5016030/c6ce320df37d8fd241487e13/2354321.PNG]\n\n\n\nEnable Contract interactions only\n\n[Image: https://downloads.intercomcdn.eu/i/o/5016181/1abbe2652e266c48107fb024/2354321.PNG]\n\n\n\nInput the event ABI and select the Transfer topic \n[Image: https://downloads.intercomcdn.eu/i/o/4963238/3835b0bdd909a5df5ce2ae11/2.PNG]\n\n\n\nSelect the Transfer topic and add a filter with either the from or to variable with the wallet address you would like to monitor (Address needs to be in lowercase):To = USDT tokens received by the wallet address\n[Image: https://downloads.intercomcdn.eu/i/o/5016254/0a696f60f3d90d4ce18cee06/1.png]\nFrom = USDT tokens sent from that address\n[Image: https://downloads.intercomcdn.eu/i/o/5016258/ed6be51502605f9cca13d791/2.png]\nConfirm by clicking Update Stream\n[Image: https://downloads.intercomcdn.eu/i/o/5016203/ed248fba6488e4bca5b6f830/2354321.PNG]\n\n\n\nYou should now start receiving events with transfers that match your filter\n[Image: https://downloads.intercomcdn.eu/i/o/5016565/5749c55476a0376a571c1d05/23152435.PNG]\n\n",
    },
    {
        id: "94211",
        title: "How to monitor for ERC20 token burns or mints?",
        description: "Receive webhooks when a token is minted or burnt",
        url: "https://help.moralis.io/en/articles/94211-how-to-monitor-for-erc20-token-burns-or-mints",
        body: 'Via Web UI\n\nLet\'s check all USDC transfers but filter transactions where the recipient or the sender is the zero address and if the amount is greater or equal to 10000 USDC.\n\n\nCreate a new Stream\n[Image: https://downloads.intercomcdn.eu/i/o/4963214/980c40c590c8b27ece379c41/1.PNG]\n\n\n\nFill out the Stream settings:- Add the USDC contract address\n[Image: https://downloads.intercomcdn.eu/i/o/4963381/d6e4616f367e77824bb774c5/4.PNG]\n\n- Input the event ABI and select the Transfer topic\n[Image: https://downloads.intercomcdn.eu/i/o/4963238/3835b0bdd909a5df5ce2ae11/2.PNG]\n- Set the filter for Mints & Burns by adding below values (0x0000000000000000000000000000000000000000)\n[Image: https://downloads.intercomcdn.eu/i/o/5018027/d4443d6aa0d442241257047f/234566t34.PNG]\n\n\n\nProgrammatically\n\nconst transferUsdcAbi = [  {    anonymous: false,    inputs: [      {        indexed: true,        internalType: "address",        name: "from",        type: "address",      },      {        indexed: true,        internalType: "address",        name: "to",        type: "address",      },      {        indexed: false,        internalType: "uint256",        name: "value",        type: "uint256",      },    ],    name: "Transfer",    type: "event",  },];const filter = {  or: [    {      and: [        { eq: ["sender", "0x00000...00000"] },        { gte: ["amount", "10000000000"] },      ],    },    {      and: [        { eq: ["receiver", "0x00000...00000"] },        { gte: ["amount", "10000000000"] },      ],    },  ],}; // we will only receive events when the transfer recipent or the sender is the zero address meaning we are filtering mints and burnconst options = {  chains: [EvmChain.ETHEREUM], // Monitor USDC on ethereum  description: "Token burns and mints", // your description  tag: "mintsAndBurns", // give it a tag  abi: transferUsdcAbi,  includeContractLogs: true,  topic0: ["Transfer(address,address,uint256)"],  advancedOptions: [    {      topic0: "Transfer(address,address,uint256)",      filter,      includeNativeTxs: true,    },  ],  webhookUrl: "https://YOUR_WEBHOOK_URL", // webhook url to receive events,};const stream = await Moralis.Streams.add(options);const { id } = stream.toJSON(); // { id: \'YOUR_STREAM_ID\', ...stream }// Attach the contract address to the streamawait Moralis.Streams.addAddress({  id,  address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", // USDC address});\n\n\n',
    },
    {
        id: "79092",
        title: "How does the Auth API work?",
        description: "",
        url: "https://help.moralis.io/en/articles/79092-how-does-the-auth-api-work",
        body: "The Auth API provides out-of-the-box all the necessary APIs you need to authenticate your user wallet to your dapp, which includes:\n\n\nRequesting challenge message for wallet signature on both EVM (https://docs.moralis.io/authentication-api/evm/reference/request-challenge-evm) and Solana (https://docs.moralis.io/authentication-api/solana/reference/request-challenge-solana)\n\n\nVerifying signed challenge message signature on both EVM (https://swagger.moralis.io/auth/#/Challenge/verifyChallengeEvm) and Solana (https://swagger.moralis.io/auth/#/Challenge/verifyChallengeSolana)\n\n\nNOTEThe Auth API currently does not support EIP-1271 (https://eips.ethereum.org/EIPS/eip-1271) signature. Therefore, authentication using the Auth API with smart contract wallet is impossible.\n\n\n[Image: https://moralis.intercom-attachments.eu/i/o/3413713/c4c4e1a298d248300333b781/bcd1597-image-082e5cdd14a446829af1782d24b84290.webp]",
    },
    {
        id: "76603",
        title: "How to create an ERC20 token?",
        description: "",
        url: "https://help.moralis.io/en/articles/76603-how-to-create-an-erc20-token",
        body: "This tutorial will show you how to create your own ERC20 token and to add it on Metamask\n![Video](https://www.youtube.com/embed/gJuWQyZJ7S0?rel=0)",
    },
    {
        id: "72958",
        title: "Does Moralis offer a swap feature to build a DEX?",
        description: "",
        url: "https://help.moralis.io/en/articles/72958-does-moralis-offer-a-swap-feature-to-build-a-dex",
        body: "No, Moralis does not.\n\nAlternatives\nFor a swap feature, we recommend that you check other 3rd party providers, such as 1inch API (https://docs.1inch.io/docs/aggregation-protocol/api/swagger), to build your swap feature for your DEX.\n\nHowever, we do offer other services that can help you to complete your DEX features:\n\nWeb3 Data API\n\n\ngetTokenBalances (https://docs.moralis.io/web3-data-api/evm/reference/get-wallet-token-balances) → fetch user's token balances\n\n\ngetTokenPrices (https://docs.moralis.io/web3-data-api/evm/reference/get-token-price) → fetch a token price that is going to be swapped\n\n\netc.\n\nStreams API\nNotifying a user when a swap is completed is very integral in providing your user with the best user experience. Moralis provides you with Streams API to listen to real-time events on the various blockchain that we supported.\n\nIn order to listen to the swap events that occur on the blockchain. All you need is the Swap events, the contract that emits the Swap events, along with its corresponding ABI.\n\nAuthentication API\nThe Authentication API can be used to authenticate and verify various web3 authentication methods. The Authentication API is agnostic to the wallets you use and you should be able to use this to connect your various wallet to your dapp.\n\nYou can learn more on how to authenticate using Authentication API with various wallets, e.g. Metamask (https://docs.moralis.io/authentication-api/evm/how-to-authenticate-users-with-metamask-using-react), WalletConnect (https://docs.moralis.io/authentication-api/evm/how-to-sign-in-with-walletconnect), Web3Auth (https://docs.moralis.io/authentication-api/evm/how-to-sign-in-with-web3authio), and others in our official documentation (https://docs.moralis.io/). \n\nMore Resources\nTo learn more on how to build a DEX step-by-step, watch the following tutorial:\n\n![Video](https://www.youtube.com/embed/t8U7GRrlYW8?rel=0)",
    },
    {
        id: "72758",
        title: "Create a new Stream (via SDK)",
        description: "",
        url: "https://help.moralis.io/en/articles/72758-create-a-new-stream-via-sdk",
        body: 'Create a new Stream programmatically using JS SDK\n\nWe will use Moralis SDK to create a stream, and you can install the Moralis SDK like this:\n\nimport Moralis from \'moralis\';import { EvmChain } from "@moralisweb3/evm-utils";Moralis.start({  apiKey: \'YOUR_API_KEY\',});const stream = {  chains: [EvmChain.ETHEREUM, EvmChain.POLYGON], // list of blockchains to monitor  description: "monitor Bobs wallet", // your description  tag: "bob", // give it a tag  webhookUrl: "https://YOUR_WEBHOOK_URL", // webhook url to receive events,  includeNativeTxs: true}const newStream = await Moralis.Streams.add(stream);const { id } = newStream.toJSON(); // { id: \'YOUR_STREAM_ID\', ...newStream }// Now we attach bobs address to the streamconst address = "0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4";await Moralis.Streams.addAddress({ address, id });\n\n\n\n🚨 Mandatory Test Webhook 🚨\n\nWhenever you create or update a stream, you will receive a test webhook.\nYou have to return status code 200 for the stream to start.\nThe test body will look like this:\n{"abi": {},"block": {"hash": "","number": "","timestamp": ""},"txs": [],"txsInternal": [],"logs": [],"chainId": "","tag": "","streamId": : "","confirmed": true,"retries": 0,"erc20Approvals": [],"erc20Transfers": [],"nftApprovals": [],"nftTransfers": []}\n\n\nWe are Live! 🎉\nNow, whenever the address you monitor is involved in an incoming or outgoing transaction, you will receive a webhook with the transaction details.\n\n\nTwo Webhooks for Each Event\nYou will receive two webhooks for each event.\n\nThe first webhook will come as soon as the transaction is included in a block and has confirmed:false. This means the block in which the event occurred still runs the risk of getting dropped because of blockchain reorganization. You are not charged for unconfirmed webhooks, only for the confirmed ones.\n\nThe second webhook will come once the block in which the event happened has minimal chance of being dropped (the chance is never zero as it is all probabilistic). This second webhook will have confirmed:true.\n\n\nEdge Cases\nIn rare cases, the webhook with confirmed:true may come before the one with confirmed:false; please ensure to handle this scenario on your end.',
    },
    {
        id: "71995",
        title: "Aptos - Quickstart with Node.js",
        description: "",
        url: "https://help.moralis.io/en/articles/71995-aptos-quickstart-with-node-js",
        body: 'Quickstart with Node.js\nWelcome to the Node.js Quickstart! Here we will walk through the process of getting your API keys, installing the SDK, and making your first API call with Node.js.\n\n\nPrerequisites\n\n\nSign up for Moralis (https://admin.moralis.io/register)\n\n\nInstall and set up your editor of choice (we will use Visual Studio Code (https://code.visualstudio.com/) in this tutorial)\n\n\nInstall the latest version of Node.js (https://nodejs.org/en/download/)\n\n\nGet Your Moralis API Key (https://docs.moralis.io/web3-data-api/aptos/get-your-api-key)\n\n\nUsing the SDK​\n\nInstalling the SDK\nRun the following command in your project directory to install the SDK via npm:\n\nnpm install moralis\n\nGet Account Transactions\n\nNow, we can get data by using the Moralis SDK. Let\'s use the getAccountTransactions function to get Account Transactions. Replace YOUR_API_KEY with your own API Key (https://help.moralis.io/en/articles/19180-where-are-my-api-keys) and run node index.js.\n\nindex.js\nconst Moralis = require("moralis").default;const runApp = async () => {  await Moralis.start({    apiKey: "YOUR_API_KEY",  });  const address =    "0x1d8727df513fa2a8785d0834e40b34223daff1affc079574082baadb74b66ee4";  try {    const response = await Moralis.AptosApi.transactions.getAccountTransactions(      {        "network": "mainnet",        "address": address      }    );    console.log(response);  } catch (e) {    console.log(e);  }};runApp();\n\n\n\n',
    },
    {
        id: "69678",
        title: "Internal Transactions",
        description: "",
        url: "https://help.moralis.io/en/articles/69678-internal-transactions",
        body: "An internal transaction is any interaction that a contract does with a specific address (or any internal call within a contract). We listen to the interactions you've set up in your Stream. So if your Stream was set up as a \"Wallet Transfer\" then there are a couple of points to mention:1. We only provide internal transactions where there is a transfer of value.\n2. We only provide the internal transactions that mention the addresses you're watching.You can monitor internal transactions happening on chain for your Stream by setting the includeInternalTxs parameter to true.\n\n",
    },
    {
        id: "58264",
        title: "Where does Authentication API store user info?",
        description: "",
        url: "https://help.moralis.io/en/articles/58264-where-does-authentication-api-store-user-info",
        body: "Authentication API provided by Moralis is used in web3 authentication flow to authenticate and verify a user that logins with a wallet to a decentralized application.\n\nHowever, it is important to know that we don't store any user data within our system. Therefore, all user data must be handled by the developers themselves and stored those data within their own database.",
    },
    {
        id: "58260",
        title: "Does Moralis v2 support react-native",
        description: "",
        url: "https://help.moralis.io/en/articles/58260-does-moralis-v2-support-react-native",
        body: "Yes, it does.\n\nMoralis v2 is comprised of an all-API service that is built based on the REST API standard, which can be called in any programming language. Using the various functions and libraries such as fetch, axios, and others you should be able to call Moralis APIs in React Native easily.\n\nAlternatively, you can also call Moralis API indirectly from the backend. Moralis v2 currently provides SDK to call the API easily in both NodeJS and Python and by building a server with the SDKs, you should be able to use the backend as a proxy to call Moralis API for your React Native decentralized application. ",
    },
    {
        id: "45132",
        title: "What is Moralis?",
        description: "",
        url: "https://help.moralis.io/en/articles/45132-what-is-moralis",
        body: "Moralis (https://moralis.io/) provides enterprise-grade APIs and SDKs that bridge the development gap between Web2 and Web3, empowering developers to integrate blockchain into any tech stack in no time.\n\nUsing Moralis means you can develop and deploy dapps quickly and efficiently, drastically reducing costs and time to market.\n\nOur suite of APIs, including the NFT API (https://moralis.io/nft-api/), EVM API (https://moralis.io/evm-api/), and Solana API (https://moralis.io/solana-api/) enables you to fetch NFT ownership, transfer, price, metadata, on-chain wallet activity, and much more - all in real-time and all cross-chain.\n\nWatch the video below for more details:\n\n![Video](https://www.youtube.com/embed/hqkOm4gWftA?rel=0)Head to our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw) for useful resources and comprehensive Web3 development tutorials using Moralis.\n\n\n\nPlease note: Our documentation and tutorials assume you have some knowledge of JavaScript (https://academy.moralis.io/js), working with objects, querying databases, and basic Web3 development experience.\n\nSee the prerequisites page (https://intercom-help.eu/moralis/en/articles/19139-prerequisites) for more details.",
    },
    {
        id: "43673",
        title: "Understanding Webhooks for Transaction Confirmation",
        description:
            "This article will help you understand how to interpret the two webhooks that you receive when a transaction is mined and confirmed.",
        url: "https://help.moralis.io/en/articles/43673-understanding-webhooks-for-transaction-confirmation",
        body: "The Streams API provides two webhooks for each block that contains the event you are interested in. One with confirmed: false when the transaction is initially mined and one with confirmed: true when the transaction is confirmed after a certain number of blocks. By understanding these webhooks and the number of confirmations required for your blockchain, you can effectively monitor and track your transactions.\n\nWhen a block is initially mined, you will receive a webhook with confirmed: false. This webhook indicates that the transaction has been added to a block but has not yet been reached the number of block confirmations required. You can use this webhook to track the progress of the transaction and take necessary actions, such as sending notifications to users or updating a database.\n\nOnce the block is confirmed, you will receive a second webhook with confirmed: true. This webhook indicates that the transaction has been successfully executed and fulfilled the number of confirmations required by the network. The number of confirmations required varies based on the blockchain you are using.\n\nTo determine the number of confirmations required for your blockchain, please refer to the table below. You can find this information under the Confirmation Blocks column for each supported chain.\n\n\nREORGANIZATION BEFORE CONFIRMATION\nUntil a block is confirmed, it is possible that a re-organization of the chain may occur, invalidating some information. If a re-organization does occur before a block is confirmed, the information associated with the block is deleted and the updated block is inserted in its place.\n\n\n\n\nChain\n\n\nChain Id (HEX)\n\n\nInternal Transaction Supported\n\n\nNote\n\n\nBlocks until confirmed\n\n\n\n\nETH\n\n\n0x1\n\n\n✅ YES\n\n\n\n\n\n12\n\n\n\n\nGOERLI\n\n\n0x5\n\n\n✅ YES\n\n\n\n\n\n12\n\n\n\n\nSEPOLIA\n\n\n0xaa36a7\n\n\n✅ YES\n\n\n\n\n\n18\n\n\n\n\nBNB\n\n\n0x38\n\n\n✅ YES\n\n\n\n\n\n18\n\n\n\n\nBNB TEST\n\n\n0x61\n\n\n✅ YES\n\n\n\n\n\n18\n\n\n\n\nPOLYGON\n\n\n0x89\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nMUMBAI\n\n\n0x13881\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nFANTOM TEST\n\n\n0xfa2\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nFANTOM\n\n\n0xfa\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nAVAX\n\n\n0xa86a\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nAVAX TEST\n\n\n0xa869\n\n\n✅ YES\n\n\n\n\n\n100\n\n\n\n\nCRONOS\n\n\n0x19\n\n\n❌ Very soon\n\n\nPlanned support within a couple of days\n\n\n100\n\n\n\n\nCRONOS TEST\n\n\n0x152\n\n\n❌ Very soon\n\n\nPlanned support within a couple of days\n\n\n100\n\n\n\n\nRONIN\n\n\n0x7e4\n\n\n✅ YES\n\n\n🔥 NEW\n\n\n100\n\n\n\n\nARBITRUM\n\n\n0xa4b1\n\n\n✅ YES\n\n\n🔥 NEW\n\n\n100\n\n\n\n\nARBITRUM TEST\n\n\n0x66eed\n\n\n✅ YES\n\n\n🔥 NEW\n\n\n100\n\n\n\n\nOPTIMISM\n\n\n0xa\n\n\n\n\n\n🔥 NEW\n\n\n100\n\n\n\n\nPALM\n\n\n0x2a15c308d\n\n\n\n\n\n🔥 NEW\n\n\n100\n\n\n\n\nAPTOS MAINNET\n\n\nmainnet\n\n\nNot Applicable\n\n\n🔥 NEW\n\n\nNot Applicable\n\n\n\n\nAPTOS TESTNET\n\n\ntestnet\n\n\nNot Applicable\n\n\n🔥 NEW\n\n\nNot Applicable\n\n\n\n",
    },
    {
        id: "43672",
        title: "Get historical ERC20 token price",
        description: "Historical Prices Endpoint",
        url: "https://help.moralis.io/en/articles/43672-get-historical-erc20-token-price",
        body: 'Prerequisites\n\nBefore getting started, make sure you have the following ready:\n\n\nNode v.14+ or Python\n\n\nNPM/Yarn or Pip\n\n\nStep 1 : Setup Moralis\nFirst register (https://docs.moralis.io/web3-data-api/evm/get-your-api-key) your Moralis account and get your Moralis API Key. Once you have your Moralis API Key, install the Moralis SDK in your project.\n\nnpm\nnpm install moralis @moralisweb3/common-evm-utils\n\nyarn\nyarn add moralis @moralisweb3/common-evm-utils\n\npnpm\npnpm add moralis @moralisweb3/common-evm-utils\n\npip\npip install moralis\n\n\nStep 2 : Get the price of an ERC20 token\nIn order to get the historical price of an ERC20 token, Moralis provides you with an getTokenPrice (https://docs.moralis.io/web3-data-api/evm/reference/get-token-price) endpoint. Here you\'ll need two parameters: address and chain.\n\nOnce you have obtained the address and chain, you can copy the following code:\n\nindex.js (Javascript)\nconst Moralis = require("moralis").default;const { EvmChain } = require("@moralisweb3/common-evm-utils");const runApp = async () => {  await Moralis.start({    apiKey: "YOUR_API_KEY",    // ...and any other configuration  });  const historicalPrice = [];  const address = "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0";  const chain = EvmChain.ETHEREUM;  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {    const response = await Moralis.EvmApi.token.getTokenPrice({      address,      chain,      toBlock,    });    historicalPrice.push(response?.toJSON());  }  console.log(response.toJSON());};runApp();\n\nindex.ts (Typescript)\nimport Moralis from "moralis";import { EvmChain } from "@moralisweb3/common-evm-utils";const runApp = async () => {  await Moralis.start({    apiKey: "YOUR_API_KEY",    // ...and any other configuration  });  const historicalPrice = [];  const address = "0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0";  const chain = EvmChain.ETHEREUM;  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {    const response = await Moralis.EvmApi.token.getTokenPrice({      address,      chain,      toBlock,    });    historicalPrice.push(response?.toJSON());  }  console.log(response.toJSON());};runApp();\n\nindex.py (Python)\nfrom moralis import evm_apiapi_key = "YOUR_API_KEY"historicalPrice = []for to_block in range(16323500, 16323550, 10):  params = {    "address": "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599",    "chain": "eth",    "to_block": to_block  }  result = evm_api.token.get_token_price(    api_key=api_key,    params=params,  )  historicalPrice.append(result)print(historicalPrice)\n\n\nStep 3 : Run the script\n\nTo run the script, enter the following command:\n\nShell (Javascript)\nnode index.js\n\nShell (Typescript)\nts-node index.ts\n\nShell (Python)\npython index.py\n\n\nStep 4 : Response\n[  {    "nativePrice": {      "value": "642828540698243",      "decimals": 18,      "name": "Ether",      "symbol": "ETH"    },    "usdPrice": 0.7811524052648599,    "exchangeAddress": "0x1f98431c8ad98523631ae4a59f267346ea31f984",    "exchangeName": "Uniswap v3"  },  {    "nativePrice": {      "value": "642828540698243",      "decimals": 18,      "name": "Ether",      "symbol": "ETH"    },    "usdPrice": 0.7811524052648599,    "exchangeAddress": "0x1f98431c8ad98523631ae4a59f267346ea31f984",    "exchangeName": "Uniswap v3"  },  {    "nativePrice": {      "value": "642892823552313",      "decimals": 18,      "name": "Ether",      "symbol": "ETH"    },    "usdPrice": 0.7812305205053863,    "exchangeAddress": "0x1f98431c8ad98523631ae4a59f267346ea31f984",    "exchangeName": "Uniswap v3"  },  {    "nativePrice": {      "value": "642892823552313",      "decimals": 18,      "name": "Ether",      "symbol": "ETH"    },    "usdPrice": 0.7812305205053863,    "exchangeAddress": "0x1f98431c8ad98523631ae4a59f267346ea31f984",    "exchangeName": "Uniswap v3"  },  {    "nativePrice": {      "value": "642892823552313",      "decimals": 18,      "name": "Ether",      "symbol": "ETH"    },    "usdPrice": 0.7812305205053863,    "exchangeAddress": "0x1f98431c8ad98523631ae4a59f267346ea31f984",    "exchangeName": "Uniswap v3"  }]\n\n\nCongratulations 🥳 You just got the historical price of an ERC20 Token with just a few lines of code using the Moralis Token API!\n\n\n\nAPI Reference\n\nIf you want to know more details on the endpoint and optional parameters, check out:- getTokenPrice (https://docs.moralis.io/web3-data-api/evm/reference/get-token-price)\n\n\n\nSupport\n\nIf you face any trouble following the tutorial, feel free to reach out to our community engineers in our Discord (https://moralis.io/discord) or Forum (https://forum.moralis.io/) to get 24/7 developer support.',
    },
    {
        id: "27968",
        title: "Upload NFT Collections to IPFS (Python & Moralis)",
        description: "",
        url: "https://help.moralis.io/en/articles/27968-upload-nft-collections-to-ipfs-python-moralis",
        body: "Introduction to Moralis IPFS endpoint.\n\n![Video](https://www.youtube.com/embed/_n52OcO6AFA?rel=0)",
    },
    {
        id: "27967",
        title: "Azure PlayFab (NodeJS) with Unity",
        description: "",
        url: "https://help.moralis.io/en/articles/27967-azure-playfab-nodejs-with-unity",
        body: "This tutorial will teach you how to set up a complete gaming backend platform for Web3 games. We use Unity as our game engine, Microsoft Azure PlayFab as our gaming backend, and Moralis to enable all the Web3 magic! You'll also learn how to use Web3 authentication and how to retrieve a user's native balance, a list of ERC-20 tokens, and the first ten NFTs they own using the Web3 API.\n\nCOMPATIBLE WITH NODEJS AND .NET\nYou can complete this tutorial using both environments. The steps where you can choose are split and specifically documented for each one, like here (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#set-up-azure-functions).\n\nPlease follow the links below to access the tutorial contents.\n\nThe Steps We Will Take​ (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#the-steps-we-will-take)\n\n\n\nSet up a Moralis account (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#set-up-a-moralis-account)\n\n\nSet up Microsoft Azure PlayFab (free plan) (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#set-up-microsoft-azure-playfab-free-plan)\n\n\nSet up Azure Functions (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#set-up-azure-functions)\n\n\nCreate Azure Functions with Visual Studio Code (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#create-azure-functions-with-visual-studio-code)\n\n\nDeploy Azure Functions with Visual Studio Code (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#deploy-azure-functions-with-visual-studio-code)\n\n\nSet up Unity and connect Microsoft Azure PlayFab (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity#set-up-unity-and-connect-microsoft-azure-playfab)\n\n",
    },
    {
        id: "27966",
        title: "Google Cloud (NodeJS) with Unity",
        description: "",
        url: null,
        body: "This tutorial will teach you how to host your custom backend (powered by Moralis' JS SDK) on Google Cloud and then connect it to Unity.\n\nPlease follow the links below to access the tutorial contents\n\nThe Steps We Will Take​ (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#the-steps-we-will-take)\n\n\n\nCustomize code from the Quickstart NodeJS tutorial (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#customize-code-from-your-first-dapp---nodejs)\n\n\nAdding authentication methods (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#adding-authentication-methods)\n\n\nAdding authentication operations (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#adding-authentication-operations)\n\n\n\n\nRun on Google Cloud (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#run-on-google-cloud)\n\n\nCalling from Unity (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#calling-from-unity)\n\n\n\nPrerequisites​ (https://docs.moralis.io/authentication-api/integrations/google-cloud-nodejs-unity#prerequisites)\n\n\nComplete the Quickstart NodeJS (https://docs.moralis.io/web3-data-api/quickstart-nodejs) tutorial\n\n",
    },
    {
        id: "27962",
        title: "Web3 Unity Multiplayer Playground",
        description: "",
        url: null,
        body: "Introduction \n\nThis Moralis Unity Sample Project demonstrates Web3 functionality; authentication, send assets, fetch assets, & interacting with Solidity smart contracts (read/write) on the Polygon Mumbai blockchain.\n\n[Image: https://downloads.intercomcdn.eu/i/o/1226913/fc15eb337d47b28493a5152c/Capture.PNG]Enter the multiplayer playground - an shared environment to move, trade currency, and trade NFTs\n\n\nVideo Tutorial\n\n![Video](https://www.youtube.com/embed/9f_SG3Fib5E?rel=0)Unity Multiplayer enables 2 or more players to share online experiences. Web3 is an evolution of the internet running on the blockchain. Together, we'll combine technologies to create a Web3 Unity Multiplayer Playground game with Polygon Mumbai.\n\nOverview\n\n\n\nTechnology\n\n\nVersion\n\n\n\n\nUnity\n\n\n>= 2021.x\n\n\n\n\nUnity Multiplayer (Lobby, NGO, Relay)\n\n\n>= 1.0.x\n\n\n\n\nMoralis SDK (NodeJS)\n\n\n>=2.x\n\n\n\n\nNodeJS\n\n\n>=16.9.0\n\n\n\n\nMicrosoft PlayFab (With Azure)\n\n\n>=220907\n\n\nThe Steps We Will Take​ (https://docs.moralis.io/example-dapps/evm/web3-unity-multiplayer-playground#the-steps-we-will-take)\n\n\n\nSetup Unity\n\n\nSetup Backend\n\nSetup Unity​ (https://docs.moralis.io/example-dapps/evm/web3-unity-multiplayer-playground#setup-unity)\n\n\n\nDownload the sample project (https://github.com/MoralisWeb3/web3-unity-sdk-sample-game-wump).\n\n\nFollow the README (https://github.com/MoralisWeb3/web3-unity-sdk-sample-game-wump/blob/main/README.md) instructions.\n\nSetup Backend​ (https://docs.moralis.io/example-dapps/evm/web3-unity-multiplayer-playground#setup-backend)\n\n\n\nComplete the Using Unity & PlayFab (NodeJS) (https://docs.moralis.io/authentication-api/integrations/azure-playfab-nodejs-unity) tutorial. Exclude .NET steps.\n\n\nWhen adding Azure's Application Settings and PlayFab's Functions, use only the updated table information below.\n\n\n\n\nAzure - Function App - Application Settings\n\n\nValue\n\n\n\n\nPLAYFAB_DEV_SECRET_KEY\n\n\n(See Tutorial)\n\n\n\n\nPLAYFAB_TITLE_ID\n\n\n(See Tutorial)\n\n\n\n\nMORALIS_API_KEY\n\n\n(See Tutorial)\n\n\n\n\n\nPlayFab - Cloud Script - Functions\n\n\nValue\n\n\n\n\nChallengeRequest\n\n\n(Copy From VS Code)\n\n\n\n\nChallengeVerify\n\n\n(Copy From VS Code)\n\n\n\n\nGetNftsForContract\n\n\n(Copy From VS Code)\n\n\n\n\nRunContractFunction\n\n\n(Copy From VS Code)\n\n\n",
    },
    {
        id: "20684",
        title: "Create a new Stream (via Admin UI)",
        description: "Learn how to create a stream to monitor any address.",
        url: "https://help.moralis.io/en/articles/20684-create-a-new-stream-via-admin-ui",
        body: 'Create a new Stream using the Admin Panel\n\n\nSelect the project where you\'ll be creating the Stream\n[Image: https://downloads.intercomcdn.eu/i/o/2800949/06d7e27dc03d1132ccb55ee8/stre4.png]\n\n \n\n\nGo to https://admin.moralis.io/settings (https://admin.moralis.io/settings) and copy your API key from there, you will need it to access the Streams page.\n[Image: https://downloads.intercomcdn.eu/i/o/2801097/da634a71bf4dea92c09f5c25/stre.PNG]\n\n\n\n\nGo to https://admin.moralis.io/streams (https://admin.moralis.io/streams) and paste your API key.\n[Image: https://downloads.intercomcdn.eu/i/o/2801100/8f7ad1ef14d6c14363701b60/stre2.png]\n\n\n\n\n\nClick on the Create a New Stream button and the following page will open. You can either select some of our predefined templates or create your stream from scratch by entering the contract or wallet address. \n[Image: https://downloads.intercomcdn.eu/i/o/2278311/70699d21cee0300fc208a652/Capture.PNG]\n\n\n\n\nCreate a stream by choosing one of these options:\n\n\nUse one of the examples to create a demo stream with real-time data streaming into the right-hand terminal.\n\n\nUse a template and enter a Contract address, Wallet address, Token address, or Token Id depending on the template to create a demo stream.\n\n\nInput a Contract address, Wallet address, Token address in Add Address to Stream, and then configure your stream.\n\n\n\n\nA. Use examples to create a demo stream\nLets choose the Tether Example. Simply, click the Example and the demo stream will be created. You will see the webhook responses streaming in the right hand terminal.\n[Image: https://downloads.intercomcdn.eu/i/o/2278435/4e3ebfe0c1afa6bcad50fe65/Capture.PNG]\n\n\nB. Use Templates to create a stream\n​ (https://docs.moralis.io/streams-api/evm/using-webui#use-templates-to-create-a-stream) Let\'s track transactions of a wallet.\n\n\nClick the Whenever a wallet recieves or sends assets template. You will be prompted to provide a Wallet address.\n\n\nEnter the wallet address you want to track. Or take a example wallet address like 0xe692869347b9b18Ef2DEED19ae1bBACE303B52B0 from Etherscan (https://etherscan.io/address/0xe692869347b9b18ef2deed19ae1bbace303b52b0).\n[Image: https://downloads.intercomcdn.eu/i/o/2278487/f76969e87371b9b2404644c9/Capture.PNG]\n\n\n\nWhen a transaction occurs on the wallet it will appear on the right-hand terminal.\n\n[Image: https://downloads.intercomcdn.eu/i/o/2278727/a263157503c489bacc9d344e/Capture.PNG]\n\n\n\nTo get the webhook sent to your backend you have to configure your stream by adding Webhook URL, Description, and Tag.\n\n\nThen click toggle to Prod. You will now get webhooks sent to your URL you provided.\n[Image: https://downloads.intercomcdn.eu/i/o/2278562/59e1aa8d9b796c555b653e11/Capture.PNG]\n\n\n\nC. Configure your own stream\n\n\nAdd Contract address or Wallet address\n[Image: https://downloads.intercomcdn.eu/i/o/2278762/ca59e6d2c8ce69e1e9060344/Capture.PNG]\n\n\nConfigure your stream to recieve webhooks to your backend by adding Webhook URL, Description, and Tag. Then click toggle to Prod.\n[Image: https://downloads.intercomcdn.eu/i/o/2278806/e8a0416db6cb2a9ff656d59b/Capture.PNG]\n\n\nSelect the Networks you want to track.\n[Image: https://moralis.intercom-attachments.eu/i/o/2278906/36e18fcfcb3f5685547c58e5/211853590-a71f84ab-ab8c-40ca-9d28-452ba64e1de6-9cda144b7cc9e2f49d644ce05b606c4c.webp]\n\n\nSelect the events you want to track by selecting from options Contract Interaction, Native Transactions, Internal Transactions under Stream Options. To read more on each options take a look at Streams options in our documentation (https://docs.moralis.io/streams-api/evm/useful-streams-options).\n[Image: https://moralis.intercom-attachments.eu/i/o/2278907/7574c3703e6969781f0cbbd5/211854294-e4507fe0-6995-4bfe-a995-a0c815b3da9d-a01006bb96195297ce282bf2a5d7e719.webp]\n\n\n\nSelect different topics to track by inputting an ABI. For example copy Tether ABI from Etherscan (https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7#code) and paste the ABI into the ABI field.\n[Image: https://moralis.intercom-attachments.eu/i/o/2278908/bf81cd75567aa190871b6736/211855440-dd652198-ffb2-4018-aac6-359899548b47-9ab7b1c935755b2640238fdfeea393a6.webp]\n[Image: https://moralis.intercom-attachments.eu/i/o/2278909/16665bd73919658d4daa97e9/211855796-3fba1383-5d07-42aa-8c14-18cd61ca23c4-86c4265375a9093aeb4912d0061b1560.webp]\n\n\n\nNow you can select the Topics you would want to only listen to. In this example lets choose to listen to the Transfer Topic (used to transfer the tokens from the owner of the token to some other address)\n[Image: https://moralis.intercom-attachments.eu/i/o/2278910/efb01d835c1038210420e42b/211856417-1497373b-21ec-41bc-8932-08a00d246eba-2f96c3c26c15d7a23931e51d96cf3918.webp]\n\n\n\nClick on *Update. Now you should start receiving data to your webhook URL as soon as some transactions are done on the address.\n\n\n\n  🚨 Mandatory Test Webhook 🚨\nWhenever you create or update a stream, you will receive a test webhook.\nYou have to return status code 200 for the stream to start.\nThe test body will look like this:\n{  "abi": {},  "block": {    "hash": "",    "number": "",    "timestamp": ""  },  "txs": [],  "txsInternal": [],  "logs": [],  "chainId": "",  "tag": "",  "streamId": : "",  "confirmed": true,  "retries": 0,  "erc20Approvals": [],  "erc20Transfers": [],  "nftApprovals": [],  "nftTransfers": []}\n\nWe are Live! 🎉\nNow, whenever the address you monitor is involved in an incoming or outgoing transaction, you will receive a webhook with the transaction details.\n\n\nTwo Webhooks for Each Event\nYou will receive two webhooks for each event.\nThe first webhook will come as soon as the transaction is included in a block and has confirmed:false. This means the block in which the event occurred still runs the risk of getting dropped because of blockchain reorganization. You are not charged for unconfirmed webhooks, only for the confirmed ones.\nThe second webhook will come once the block in which the event happened has minimal chance of being dropped (the chance is never zero as it is all probabilistic). This second webhook will have confirmed:true.\n\n\nEdge Cases\nIn rare cases, the webhook with confirmed:true may come before the one with confirmed:false; please ensure to handle this scenario on your end.\n',
    },
    {
        id: "20683",
        title: "How many separate streams can I create?",
        description: "",
        url: "https://help.moralis.io/en/articles/20683-how-many-separate-streams-can-i-create",
        body: 'On a Free plan, you can create up to 20 Streams, and up to 200 streams for paid plan with separate configs, and multiple addresses can be added to a single stream config, "listen to all addresses" feature can also be used with a single stream config for Business and Enterprise plans.\nYou can contact our support team at hello@moralis.io (mailto:hello@moralis.io) if you need a higher limit, we can support an unlimited number of streams.\n\nYou can also apply different filters for different contract addresses within the same Stream by following the method described here (https://docs.moralis.io/streams-api/filter-streams#filter-based-on-the-contract-address-that-emits-an-event).\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube (https://www.youtube.com/c/MoralisWeb3) channel, for more useful resources and great tutorials on the Moralis Web3 development workflow.',
    },
    {
        id: "20682",
        title: "How many addresses can I add to a stream?",
        description: "",
        url: "https://help.moralis.io/en/articles/20682-how-many-addresses-can-i-add-to-a-stream",
        body: 'Free Starter Plan accounts can add up to 10k addresses. Pro and Business plans can add up to 50k addresses.\nIf needed, you can increase your limit by contacting our support team at hello@moralis.io (mailto:hello@moralis.io).\nEnterprise plans can have fully customized limits with no hard caps - the Streams API works with up to 100M addresses. You can also use the "listening to all addresses" feature separately for contracts.\nHowever, you can add several addresses into a single Stream and monitor them in real-time. Read more about this here. (https://docs.moralis.io/streams-api/monitor-multiple-addresses)',
    },
    {
        id: "20681",
        title: "What is a record? (Streams API)",
        description: "",
        url: "https://help.moralis.io/en/articles/20681-what-is-a-record-streams-api",
        body: 'Summary\n\n\nA record is either a transaction (txs), log (logs) or internal transactions (txsInternal) in the webhook response.\n\n\nRecords is the base for usage of Streams\n\n\nRecords are only counted towards your usage for webhooks with confirmed:true so webhooks with confirmed:false are free\n\n\nDecoded logs are also free they do NOT count as Records.\n\n\n\nWhat is the record?\nA record is either a transaction (txs in response), log (logs in response) or internal transaction (txsInternal in response). The number of records in a webhook is the sum of txs + logs + txsInternal.\nIn the header of a webhook, you can find the total number of records in that webhook in the header x-records-charged.\nIn this example, the x-records-charged is 20 so the webhook contains 20 records.\nheaders: { \'x-region\': \'us-west-2\', \'x-queue-size\': \'0\', \'x-records-charged\': ‘20’ \'x-signature\': \'0xdf49163b5273b50a8da48e82b7254b45d81aeee9a02f1909a45d7aaea240e9c2\', }\nOnly confirmed blocks will be charged, unconfirmed blocks will have \'x-records-charged\': ‘0’\n\nRecords determine usage\nRecords handle the usage of Streams API. In your plan, you have an included amount of records for free. You can find your included limits under your billing pagehttps://admin.moralis.io/account/billing (https://admin.moralis.io/account/billing).\nFor each transaction, you get two webhooks (read more here (https://docs.moralis.io/docs/webhooks)), records are only counted towards your usage for webhooks with Confirmed status True.\n\n\nCheck your total consumed record for a period\nBy using /status (see API reference (https://docs.moralis.io/reference/getstats)) you will get a summary of totalLogsProcessed,totalTxsProcessed, and totalTxsInternalProcessed for your current billing period.\nExample:\n{ "totalWebhooksDelivered": 1288, "totalWebhooksFailed": 17, "totalLogsProcessed": 4257, "totalTxsProcessed": 0, "totalTxsInternalProcessed": 0 }\n\nWhere your total consumed records for the current billing period would be "totalLogsProcessed": 4257+"totalTxsProcessed": 0+"totalTxsInternalProcessed": 0. In this case total consumption is 4257.\n\n\nCheck one streams total consumed records for a period\nBy using /stats/{streamId} (see API reference (https://docs.moralis.io/reference/getstatsbystreamid)) you will get a summary of totalLogsProcessed,totalTxsProcessed, and totalTxsInternalProcessed for that specific stream.\nExample:\n{ "totalWebhooksDelivered": 0, "totalWebhooksFailed": 0, "totalLogsProcessed": 0, "totalTxsProcessed": 0, "totalTxsInternalProcessed": 0, "createdAt": "2022-10-25T08:21:00.877Z", "updatedAt": "2022-10-25T08:21:00.877Z" }\n \nWhere your total consumed records for the current billing period would betotalLogsProcessed+totalTxsProcessed+totalTxsInternalProcessed.\n\n\nRecords per transaction type\nIt depends on the selected address activity how many records will be charged\n\n\nContract Interactions (logs)\n\n\nNative Transactions (txs)\n\n\nInternal Transactions (txsInternal)\n\n\n\n\nDescription\n\n\nNumber of records*\n\n\n\n\nStream with txs, logs and a erc20 transfer event is emitted\n\n\n2\n\n\n\n\nStream with txs, logs and 10 NFT Tokens (ERC721) were transferred in one transaction\n\n\n11\n\n\n\n\nStream with txs, logs and 30 NFT Tokens (ERC1155 Batch) were transferred in one transaction\n\n\n2\n\n\n\n\nStream with logs and a ERC721 NFT is minted with 100 Tokens\n\n\n100\n\n\n\n\nStream with txs and a native transfer takes place\n\n\n1\n\n\n*The number of records for logs depends on the contract emitting the events, more complex contracts could emit more records\n\n\nDecoded logs\nMoralis will decode and enrich standardized contracts (ERC20/ERC721/ERC1155), for each log that matches one of those contracts, a decoded log will be generated, currently, the decoded logs are:\n\n\nerc20Transfers\n\n\nerc20Approvals\n\n\nnftTransfers\n\nDecoded logs are free they do NOT count as Records.\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube (https://www.youtube.com/c/MoralisWeb3) channel, for more useful resources and great tutorials on the Moralis Web3 development workflow.',
    },
    {
        id: "19202",
        title: "Why is metadata null for some NFTs?",
        description: "",
        url: "https://help.moralis.io/en/articles/19202-why-is-metadata-null-for-some-nfts",
        body: "The goal of Moralis is to always offer you fully resolved metadata so that you don't have to resolve it yourself and save load time in your app.\n\nWhy is it null?\nSome NFTs have their metadata hosted on centralized servers. These servers sometimes have rate limits preventing Moralis from fully indexing the collections that have their metadata stored on such servers. In such cases the metadata may not be resolved. We are working all the time to extend our coverage of metadata.\n\nHow to get metadata?\nYou can use the Resync Metadata endpoint (https://docs.moralis.io/web3-data-api/reference/resync-metadata) to ReSync the metadata of an NFT, and for an NFT collection, you can use the Sync NFT contract  (https://docs.moralis.io/reference/syncnftcontract)endpoint to sync the NFT contract metadata.\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19200",
        title: "Why is metadata outdated?",
        description: "",
        url: "https://help.moralis.io/en/articles/19200-why-is-metadata-outdated",
        body: "There are millions of NFTs across the different blockchains that Moralis supports. The vast majority of NFTs never change metadata, therefore Moralis doesn't automatically re-sync metadata. This is something we may do in the future!\n\nFor now, Moralis has the Resync metadata (https://docs.moralis.io/web3-data-api/reference/resync-metadata) endpoint that can help you manually trigger metadata re-sync on the specific NFT. We know that this feature is important when you develop your NFT and you may be experimenting with different metadata and updating it often during the development of your app.\n\nJoin our Discord (https://moralis.io/joindiscord) to be updated when this feature is released!\n\nIf you want us to add the auto re-sync feature - add it or upvote it here: https://roadmap.moralis.io/b/feature-requests/ (https://roadmap.moralis.io/b/feature-requests/)\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19201",
        title: 'Getting Errors when Trying to Run "npm install moralis" on Linux',
        description: "Errors when using Linux",
        url: "https://help.moralis.io/en/articles/19201-getting-errors-when-trying-to-run-npm-install-moralis-on-linux",
        body: 'Try installing the package "libudev-dev" and re-run the install script.\n\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.',
    },
    {
        id: "19199",
        title: "I just minted an NFT - why is it not showing up in the API?",
        description: "",
        url: "https://help.moralis.io/en/articles/19199-i-just-minted-an-nft-why-is-it-not-showing-up-in-the-api",
        body: "Ensure you are compliant with the standards\n\nIn order for the NFT to show up in the API it needs to be compliant with ERC721 (https://eips.ethereum.org/EIPS/eip-721) or ERC1155 (https://eips.ethereum.org/EIPS/eip-1155) standards.\n\nBoth of these standards require the implementation of supportsInterface method from ERC165 standard.\n\nIf you use OpenZeppelin contracts (https://docs.openzeppelin.com/contracts/2.x/api/token/erc721) this is done automatically for you.\n\nA way to double check this is to open your contract in Etherscan and ensure it says ERC721 or ERC1155 on your contract page.\n\n[Image: https://moralis.intercom-attachments.eu/i/o/533423/8051bd7f8d2a9cbcfb2a3c02/spaces-2F-MVStbACGLCycg7J5WQ2-2Fuploads-2F006ykzKu2gUf6m2uvGPc-2FScreenshot-202021-12-14-20at-2012.51.44.png-alt%3Dmedia-token%3D077a3ad6-c59b-456b-8a0b-f18acecc2e93]A contract like this will show up in the NFT API.\n[Image: https://moralis.intercom-attachments.eu/i/o/533424/b51defa3370df184854d7616/spaces-2F-MVStbACGLCycg7J5WQ2-2Fuploads-2Fng1A1lXZ6QBbLiT6i9uI-2FScreenshot-202021-12-14-20at-2012.49.43.png-alt%3Dmedia-token%3D7b70a3f8-a1db-4684-b812-d48d45f05b78]A contract like this won't show up in the NFT API.\nYou can also use the Resync NFT Contract (https://docs.moralis.io/web3-data-api/reference/sync-nft-contract) and Resync metadata (https://docs.moralis.io/web3-data-api/reference/resync-metadata) endpoint to refresh the metadata of the contract or NFT.\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19196",
        title: "Make Token Price Charts",
        description: "",
        url: null,
        body: "This article explains how to fetch price of any token and how to draw a chart based on this data using Moralis SDK.\n\nJay from Moralis explains how to fetch price of any crypto or token and how to generate price charts based on this data. Moralis makes this process very simple, watch the video below you will learn a lot!\n\n![Video](https://www.youtube.com/embed/90dMpTlPNZ0?rel=0)Retrieving token price data from the blockchain and drawing a price chart using Moralis SDK.\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19197",
        title: "Why am I getting Error 429? (Rate Limit Exceeded)",
        description: "",
        url: "https://help.moralis.io/en/articles/19197-why-am-i-getting-error-429-rate-limit-exceeded",
        body: "Rate-limits when calling the API \n\nError 429 - Rate limit between your own server and Web3 API\nWhen you are calling Web3 API from your own backend you may get limited by the Web3 API.\nSome heavy requests count as several requests (https://docs.moralis.io/reference/weights-and-rate-limits), you can check our request weight table here (https://docs.moralis.io/web3-data-api/compute-units-cu#rate-limit-cost).\n\nIn order to not get rate-limited you can upgrade your Moralis plan (https://moralis.io/pricing/).\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19198",
        title: "Why are number of NFTs different on OpenSea compared to Moralis API?",
        description: "",
        url: "https://help.moralis.io/en/articles/19198-why-are-number-of-nfts-different-on-opensea-compared-to-moralis-api",
        body: "Our API can only read data that is public onchain. Lazy minted NFTs on an OpenSea shared contract are stored only in a centralized OpenSea database until the first transfer.\n\nYou can find more information on the OpenSea blog: https://opensea.io/blog/announcements/introducing-the-collection-manager/ (https://opensea.io/blog/announcements/introducing-the-collection-manager/).\n\nAnother reason may be that the NFTs from the OpenSea inventory are in different chains. In this case, you need to make API requests for each network. \n\nYou are welcome to visit our documentation website (https://docs.moralis.io/web3-data-api/reference/web3-api-version) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19193",
        title: "Get Any Token Price",
        description: "Get real-time price discovery",
        url: "https://help.moralis.io/en/articles/19193-get-any-token-price",
        body: "![Video](https://www.youtube.com/embed/4OYm8LHBGOQ?rel=0)Prerequisites\nBefore getting started, make sure you have the following ready:\n\n\nNode v.14+ or Python\n\n\nNPM/Yarn or Pip\n\nPlease click on the links below to access the tutorial content.\n\nSteps we will be following:\n\n\nStep 1: Setup Moralis (https://docs.moralis.io/web3-data-api/evm/how-to-get-the-price-of-an-erc20-token#step-1-setup-moralis)\n\n\nStep 2: Get the price of an ERC20 token (https://docs.moralis.io/web3-data-api/evm/how-to-get-the-price-of-an-erc20-token#step-2-get-the-price-of-an-erc20-token)\n\n\n\nStep 3: Run the script (https://docs.moralis.io/web3-data-api/evm/how-to-get-the-price-of-an-erc20-token#step-3-run-the-script)  \n\n\n\nAPI Reference\nIf you want to know more details on the endpoint and optional parameters, check out:\ngetTokenPrice (https://docs.moralis.io/web3-data-api/reference/get-token-price)",
    },
    {
        id: "19194",
        title: "Using the Solana API",
        description: "",
        url: "https://help.moralis.io/en/articles/19194-using-the-solana-api",
        body: "\n![Video](https://www.youtube.com/embed/iWUIDsMh8rs?rel=0)What is the Solana API?\nNo more wondering which tokens your users hold. With the Solana API you can get all token balances owned by a given network and address, as well as NFT data and native wallet balances.\n\nNFT API (https://docs.moralis.io/web3-data-api/solana/nft-api)\nToken API (https://docs.moralis.io/web3-data-api/solana/token-api)\nBalance API (https://docs.moralis.io/web3-data-api/solana/balance-api)\n\n\nSolana API Features\nFrom wallet data through to token and NFT data, the Solana API provides out-of-the-box functionality for the most popular features, including:\n\nFetching NFT metadata\nFetching wallet portfolios\nFetching token balances by wallet\nFetching SPL token prices\n\n\nPopular use cases\nThe use cases for our Solana API are truly endless! Some popular use cases include:\n\nNFT Marketplaces\nToken Price Feeds\nPortfolio Apps\n\n\nSupported Networks\nSolana Mainnet\nSolana Devnet",
    },
    {
        id: "19190",
        title: "Cursor pagination with Moralis API",
        description: "",
        url: "https://help.moralis.io/en/articles/19190-cursor-pagination-with-moralis-api",
        body: 'Cursor pagination with Moralis API\n![Video](https://www.youtube.com/embed/s_Ae2Tkmz4U?rel=0)For paginating API results you can use cursor parameter. You get cursor from current request and you use it for the next request until there are no more results returned.\n\nExample of using cursor in NodeJS with a Moralis Server:\nimport Moralis  from \'moralis\';import { EvmChain } from \'@moralisweb3/common-evm-utils\';const chain = EvmChain.ETHEREUM;const address = \'0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\'; //Cryptopunks contract addressawait Moralis.start({    apiKey: \'YOUR_API_KEY\',    // ...and any other configuration});let cursor = null;let owners = {};  do {        const response = await Moralis.EvmApi.nft.getNFTOwners({        address,        chain,          limit: 100,        cursor: cursor,            });        console.log(console.log(      `Got page ${response.page} of ${Math.ceil(        response.total / response.page_size      )}, ${response.total} total`    );     for (const owner of response.result) {      owners[owner.owner_of] = {        amount: owner.amount,        owner: owner.owner_of,        tokenId: owner.token_id,        tokenAddress: owner.token_address,      };    }    cursor = response.cursor;  } while (cursor != "" && cursor != null);  console.log("owners:", owners, "total owners:", Object.keys(owners).length);}\n\nExample of using cursor parameter in Python:\nimport requestsimport timedef get_nft_owners(offset, cursor):    print("offset", offset)    url = \'https://deep-index.moralis.io/api/v2/nft/<address_here>/owners?chain=polygon&format=decimal\'    if cursor:      url = url + "&cursor=%s" % cursor    print("api_url", url)    headers = {        "Content-Type": "application/json",        "X-API-Key": "API_KEY_HERE"    }    statusResponse = requests.request("GET", url, headers=headers)    data = statusResponse.json()    print("HTTP headers:", statusResponse.headers)    try:        print("nr results", len(data[\'result\']))    except:        print(repr(data))        print("exiting")        raise SystemExit    cursor = data[\'cursor\']    print(data[\'page\'], data[\'total\'])    return cursorcursor = Nonefor j in range(0, 10):    cursor = get_nft_owners(j*500, cursor)    print()    time.sleep(1.1)\n\nLIMIT VALUE FOR CURSOR\nThe limit param value for cursor can be set at page 1 and the same limit value will be used through the following pages, you cannot change the limit value after page 1.',
    },
    {
        id: "19180",
        title: "Where are my API keys?",
        description: "",
        url: "https://help.moralis.io/en/articles/19180-where-are-my-api-keys",
        body: "IMPORTANT - Please note that your keys should never be shared. Your API keys are available within your account.\n\nHere is how you can find them:\n1. Make sure you're on the right page - https://admin.moralis.io/ (https://admin.moralis.io/2)2. Click on Settings3. You will be directed to the page below, where you'll find your API keys and other created secrets for your projects.\n[Image: https://downloads.intercomcdn.eu/i/o/3057875/4879ec17e5d7137b81d8b1e2/Capture.PNG]\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3/videos), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19175",
        title: "Does Moralis work with multi-chains? (What blockchains does Moralis support?)",
        description: "",
        url: "https://help.moralis.io/en/articles/19175-does-moralis-work-with-multi-chains-what-blockchains-does-moralis-support",
        body: "Our goal is to support every chain on Moralis. For the moment, we fully support the following Blockchains:\n\n\n\nEthereum\n\n\nBSC (Binance Smart Chain)\n\n\nPolygon\n\n\nAvalanche\n\n\nAptos (https://docs.moralis.io/web3-data-api/reference/get-nfts-by-ids)\n\n\nCronos\n\n\nPalm\n\n\nArbitrum\n\n\nFantom\n\n\nSolana API (https://docs.moralis.io/web3-data-api/solana)\n\nYou can find the current and future syncing status at: https://status.moralis.io/ (https://status.moralis.io/)\n\n[Image: https://moralis.intercom-attachments.eu/i/o/533418/25c7d0aeb5da05d62e7a28fa/5.png]You're welcome to add unsupported blockchains as a feature request to our roadmap page, as well as upvote any feature request - https://roadmap.moralis.io/ (https://roadmap.moralis.io/)\n\n",
    },
    {
        id: "19177",
        title: "How are compute units calculated? (How does it affect my limits?)",
        description: "",
        url: "https://help.moralis.io/en/articles/19177-how-are-compute-units-calculated-how-does-it-affect-my-limits",
        body: "All Moralis plans have generous limits on the number of requests you can make. How many included compute units  you have depends on the plan you have, check the pricing page (https://moralis.io/pricing) for more details.\nIn most cases, one request to the Web3API counts as one request towards your monthly quota (also called the Base). However, some API requests are very computationally heavy and therefore count as several compute units. \n\nSee the page Compute Units (https://docs.moralis.io/web3-data-api/compute-units-cu) for details about requests and how they are calculated.Note: for exact rate limit values the endpoint <https://deep-index.moralis.io/api/v2/info/endpointWeights>  can be used.\n\nNote: /nft/{address}/{token_id}/metadata/resync has a billing cost of 5 and a rate limit cost of 25, meaning that you can call it only once per second with a free plan and twice a second with a Pro plan\n\nYou are welcome to visit our documentation website (https://docs.moralis.io/) and YouTube channel (https://www.youtube.com/c/MoralisWeb3), for more useful resources and great tutorials on the Moralis Web3 development platform.",
    },
    {
        id: "19178",
        title: "What happens if I exceed my monthly limit?",
        description: "",
        url: "https://help.moralis.io/en/articles/19178-what-happens-if-i-exceed-my-monthly-limit",
        body: "It might be possible that you exceed your Monthly Compute Units limit on your current plan. To help you understand what the Monthly limits are for each plan and what to expect once it is reached, you will find below more details about the process: Free Plan - 4000 Compute Units per day  (When exceeded, the keys are automatically blocked until the next day.)Pro Plan - 15M Compute Units per month (When exceeded, additional compute units are charged)Business Plan - 30M Compute Units per month (When exceeded, additional compute units are charged)* For Enterprise plans, this might differ due to the custom plans and committed use discounts. You can always reach out to your Account Manager for more details about the Enterprise plan billing structure.\n\n[Image: https://downloads.intercomcdn.eu/i/o/1627810/3ae21102dff02b87c6f49224/Capture.PNG]Important Note: In the event that you are canceling your subscription and you exceed the monthly request limit before the subscription ends, all additional requests accrued during that period will still be charged.",
    },
    {
        id: "19172",
        title: "What programming languages does Moralis support?",
        description: "",
        url: "https://help.moralis.io/en/articles/19172-what-programming-languages-does-moralis-support",
        body: "We currently support the following languages for our SDKs:\n\n\nNodeJS\n\n\nPython\n\n\nFor other programming languages, you can still call our API as you would for a normal REST API.\n\nIf you have any requests of what you'd like to see implemented, you're welcome to let us know in our roadmap page at https://roadmap.moralis.io/ (https://roadmap.moralis.io/). Thanks!",
    },
    {
        id: "19174",
        title: "How is the rate limit applied? (Account wide or per requests/endpoints?)",
        description: "",
        url: "https://help.moralis.io/en/articles/19174-how-is-the-rate-limit-applied-account-wide-or-per-requests-endpoints",
        body: "Rate limits are applied to your API key, every Moralis account has an API key. Basically, all the requests and endpoints used within your account are summed up to your API key. Practically, regardless of the number of endpoints used, the total amount is assigned to the API key of your account. You can view your Usage by clicking on Account in the left column and selecting Usage.\n\n[Image: https://downloads.intercomcdn.eu/i/o/3057456/1dd1987443b92583adb7aeb6/1.PNG]",
    },
    {
        id: "19161",
        title: "Where can I find an RPC url?",
        description: "",
        url: "https://help.moralis.io/en/articles/19161-where-can-i-find-an-rpc-url",
        body: "If you need a node provider, we recommend you to check out our partner Chainstack at https://moralis.io/largenodes (https://moralis.io/largenodes).\n\n[Image: https://moralis.intercom-attachments.eu/i/o/533415/bd8b511fbd9b65d2d6b41417/Capture.JPG]Ideally, you should use nodes as little as possible as they are low-level technology that requires many requests to accomplish even very simple things and require a lot of overhead.Moralis offers many ways to avoid using nodes like our Streams API (https://docs.moralis.io/streams-api), where you can Stream blockchain data directly to your webhook. These functionalities of the Streams API would normally require many thousands of node requests, but if you use Moralis, they are included for free. This will also save you a lot of development time as our solution is fully managed and will scale as your project grows. Additionally, check out the Moralis Web3 API,  (https://docs.moralis.io/web3-data-api)which can accomplish a lot more than nodes with fewer requests.",
    },
];
